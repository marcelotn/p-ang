{
  "_args": [
    [
      {
        "raw": "typescript-cs-poco@git+https://github.com/ffMathy/typescript-cs-poco.git",
        "scope": null,
        "escapedName": "typescript-cs-poco",
        "name": "typescript-cs-poco",
        "rawSpec": "git+https://github.com/ffMathy/typescript-cs-poco.git",
        "spec": "git+https://github.com/ffMathy/typescript-cs-poco.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ffMathy/typescript-cs-poco.git",
          "sshUrl": "git+ssh://git@github.com/ffMathy/typescript-cs-poco.git",
          "httpsUrl": "git+https://github.com/ffMathy/typescript-cs-poco.git",
          "gitUrl": "git://github.com/ffMathy/typescript-cs-poco.git",
          "shortcut": "github:ffMathy/typescript-cs-poco",
          "directUrl": "https://raw.githubusercontent.com/ffMathy/typescript-cs-poco/master/package.json"
        }
      },
      "C:\\Projetos\\Repos\\XP_RendaFixa\\src\\RendaFixaFront\\portalrf\\node_modules\\gulp-typescript-cs-poco"
    ]
  ],
  "_from": "git+https://github.com/ffMathy/typescript-cs-poco.git",
  "_id": "typescript-cs-poco@1.12.0",
  "_inCache": true,
  "_location": "/typescript-cs-poco",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typescript-cs-poco@git+https://github.com/ffMathy/typescript-cs-poco.git",
    "scope": null,
    "escapedName": "typescript-cs-poco",
    "name": "typescript-cs-poco",
    "rawSpec": "git+https://github.com/ffMathy/typescript-cs-poco.git",
    "spec": "git+https://github.com/ffMathy/typescript-cs-poco.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ffMathy/typescript-cs-poco.git",
      "sshUrl": "git+ssh://git@github.com/ffMathy/typescript-cs-poco.git",
      "httpsUrl": "git+https://github.com/ffMathy/typescript-cs-poco.git",
      "gitUrl": "git://github.com/ffMathy/typescript-cs-poco.git",
      "shortcut": "github:ffMathy/typescript-cs-poco",
      "directUrl": "https://raw.githubusercontent.com/ffMathy/typescript-cs-poco/master/package.json"
    }
  },
  "_requiredBy": [
    "/gulp-typescript-cs-poco"
  ],
  "_resolved": "git+https://github.com/ffMathy/typescript-cs-poco.git#0abca18b4327b574df6f161512be238c816da7ab",
  "_shasum": "1defa30d1771b14b771ad9b152b381f8f9ff5f25",
  "_shrinkwrap": null,
  "_spec": "typescript-cs-poco@git+https://github.com/ffMathy/typescript-cs-poco.git",
  "_where": "C:\\Projetos\\Repos\\XP_RendaFixa\\src\\RendaFixaFront\\portalrf\\node_modules\\gulp-typescript-cs-poco",
  "author": {
    "name": "Mathias Lorenzen",
    "email": "mathias.lorenzen@live.com"
  },
  "bugs": {
    "url": "https://github.com/evertras/typescript-cs-poco/issues"
  },
  "dependencies": {},
  "description": "Generates a Typescript type definition file for a C# POCO class or enum.",
  "devDependencies": {
    "@types/node": "^7.0.18",
    "gulp": "^3.9.0",
    "jasmine-node": "^1.14.5",
    "tsd": "^0.6.5"
  },
  "gitHead": "0abca18b4327b574df6f161512be238c816da7ab",
  "homepage": "https://github.com/evertras/typescript-cs-poco#readme",
  "keywords": [
    "typescript",
    "C#",
    "poco"
  ],
  "license": "MIT",
  "main": "./src/index.js",
  "name": "typescript-cs-poco",
  "optionalDependencies": {},
  "readme": "# typescript-cs-poco\r\nGenerates a Typescript type definition file for a C# POCO class.  Takes in a string of the file contents and spits back a string of the matching Typescript interface.\r\n\r\n## Current wrappers\r\n\r\n- Gulp: https://github.com/ffMathy/gulp-typescript-cs-poco\r\n- Grunt: https://github.com/ffMathy/grunt-typescript-cs-poco\r\n\r\n## Installation with npm\r\n\r\n`npm install --save https://github.com/ffMathy/typescript-cs-poco.git`\r\n\r\n## Options\r\n\r\nThe following options can be supplied into the `pocoGen` function, and are therefore also available in the above wrappers.\r\n\r\n##### baseNamespace\r\n\r\nIf supplied, wraps all classes into a module with the same name.  Example:\r\n\r\n```C#\r\npublic class MyPoco\r\n{\r\n\tpublic string Name { get; set; }\r\n\tpublic int Id { get; set; }\r\n}\r\n```\r\n\r\n```typescript\r\nmodule MyNamespace {\r\n\texport interface IMyPoco {\r\n\t\tName: string;\r\n\t\tId: number;\r\n\t}\r\n}\r\n```\r\n\r\nNote that using this option with gulp concat() will create many individual module/interface declarations.  This is technically valid, but if you want a nice, clean version run concat() first on all your .cs files and then run this plugin with the baseNamespace option to wrap EVERYthing in a single module namespace.\r\n\r\n##### dateTimeToDate\r\n\r\nDefaults to `false`.  Due to serialization/deserialization complications, the default implementation is to transform DateTime fields to strings, as that's what they naturally turn into in most .NET APIs.  If you want to treat the type as a Date, *first make sure your API is handling the serialization properly*!  Then provide the dateTimeToDate option set to `true` to turn this:\r\n\r\n```C#\r\npublic class MyPoco\r\n{\r\n  public DateTime Timestamp { get; set; }\r\n  public double Value { get; set; }\r\n}\r\n```\r\n\r\nInto this:\r\n\r\n```typescript\r\ninterface IMyPoco {\r\n  Timestamp: Date;\r\n  Value: number;\r\n}\r\n```\r\n\r\n##### definitionFile\r\n\r\nDefaults to `true`.  If explicitly set to `false`, the output file will not be of type d.ts and any baseNamespace being used will not have declare before the module name.\r\n\r\n##### propertyNameResolver\r\n\r\nIf supplied, this function will be called every time a property is resolved. The function takes a single parameter of the name of the property and should return the transformed name as a string.  For example, the function might turn the property name into camelCase, or prepend it with a prefix of some sort to help match an API-side transformation.\r\n\r\nThe following example shows how to turn property names into camelCase.\r\n\r\n```typescript\r\nfunction camelCasePropertyNameResolver(propName) { \r\n  return propName[0].toLowerCase() + propName.substring(1); \r\n}\r\n```\r\n\r\n##### timeout\r\n\r\nSpecifies the regex timeout, in milliseconds. Defaults to `30000`. Useful if you are performing operations on large items.\r\n\r\n##### prefixWithI\r\n\r\nDefaults to `false`. If set to `true`, all interfaces (but not enums) will be prefixed with I. The conversion will now look like this:\r\n\r\n```C#\r\npublic class MyPoco\r\n{\r\n  public string Name { get; set; }\r\n  public int Id { get; set; }\r\n}\r\n```\r\n\r\nTo:\r\n\r\n```typescript\r\ninterface IMyPoco {\r\n  Name: string;\r\n  Id: number;\r\n}\r\n```\r\n\r\n##### additionalInterfaceCodeResolver\r\n\r\nIf supplied, this function will be called for every interface generated. The function takes a single parameter of the name of the class or interface that the current interface is being generated from and should return additional code that will be added to the interface.\r\n\r\nThe following example shows how to add a `clone` method to all interfaces generated which returns a type of the original class.\r\n\r\n```typescript\r\nfunction cloneFunctionInterfaceCodeResolver(leadingWhitespace, className, properties, methods) { \r\n  return leadingWhitespace + \"clone(newId: number): \" + className + \";\"; \r\n}\r\n```\r\n\r\n##### methodNameResolver\r\n\r\nSame as `propertyNameResolver`, but for method names.\r\n\r\n##### interfaceNameResolver\r\n\r\nSame as `propertyNameResolver`, but for interface names.\r\n\r\n##### typeResolver\r\n\r\nSame as `propertyNameResolver`, but has a `scope` parameter as well, and is meant for type names instead. The `scope` can be either `\"property-type\"`, `\"method-return-type\"` or `\"method-argument-type\"` depending on what context the current type was found.\r\n\r\nFor instance, the following example will wrap all types emitted in an `Observable<>`, but only for properties.\r\n\r\n```typescript\r\nfunction camelCasePropertyTypeResolver(typeName, scope) { \r\n  if(scope !== \"property-type\") return typeName;\r\n  return \"Observable<\" + typeName + \">\"; \r\n}\r\n```\r\n\r\n##### ignoreVirtual\r\n\r\nIf set to `true`, virtual properties will be ignored.  This is useful for things like EF-created POCOs that may have virtual reference fields that shouldn't be included.\r\n\r\n##### ignoreMethods\r\n\r\nIf set to `true`, methods will be ignored.\r\n\r\n##### stripReadOnly\r\n\r\nIf set to `true`, the `readonly` keyword on properties will be removed, but the properties themselves will still be added.\r\n\r\n##### includeInterfaces\r\n\r\nIf set to `true`, any interfaces found in the given files will also be included as Typescript interfaces.  By default interfaces are ignored.\r\n\r\n##### ignoreInheritance\r\n\r\nIf set to an array of class names, inheritance from these classes will be ignored. If set to `true` will ignore inheritance in general.\r\n\r\n##### useStringUnionTypes\r\n\r\nIf set to `true`, any enums will be converted to string union types.\r\n\r\n##### customTypeTranslations\r\n\r\nIf set to an object, map every key in the object to the key's value.  For example:\r\n\r\n```typescript\r\nvar options = {\r\n  customTypeTranslations: {\r\n    MyCustomStringClass: 'string'\r\n  }\r\n}\r\n```\r\n\r\nWill turn this:\r\n\r\n```C#\r\npublic class MyPoco\r\n{\r\n  public MyCustomStringClass Name { get; set; }\r\n}\r\n```\r\n\r\nInto this:\r\n\r\n```typescript\r\ninterface MyPoco {\r\n  Name: string;\r\n}\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ffMathy/typescript-cs-poco.git"
  },
  "scripts": {
    "test": "jasmine-node --color --matchall spec"
  },
  "version": "1.12.0"
}
