var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* tslint:disable:no-inferrable-types */
import { Injectable } from '@angular/core';
import { Toast } from './toast-component';
/**
 * Configuration for an individual toast.
 */
var ToastConfig = (function () {
    function ToastConfig(config) {
        if (config === void 0) { config = {}; }
        /** show close button */
        this.closeButton = false;
        /** time to close after a user hovers over toast */
        this.extendedTimeOut = 1000;
        /** show progress bar */
        this.progressBar = false;
        /** time to live */
        this.timeOut = 5000;
        /** allow html in message */
        this.enableHtml = false;
        this.toastClass = 'toast';
        this.positionClass = 'toast-top-right';
        this.titleClass = 'toast-title';
        this.messageClass = 'toast-message';
        /** clicking on toast dismisses it */
        this.tapToDismiss = true;
        /** the Angular component to be shown */
        this.toastComponent = Toast;
        /** Helps show toast from a websocket or from event outside Angular */
        this.onActivateTick = false;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.closeButton = use(config.closeButton, this.closeButton);
        this.extendedTimeOut = use(config.extendedTimeOut, this.extendedTimeOut);
        this.progressBar = use(config.progressBar, this.progressBar);
        this.timeOut = use(config.timeOut, this.timeOut);
        this.enableHtml = use(config.enableHtml, this.enableHtml);
        this.toastClass = use(config.toastClass, this.toastClass);
        this.positionClass = use(config.positionClass, this.positionClass);
        this.titleClass = use(config.titleClass, this.titleClass);
        this.messageClass = use(config.messageClass, this.messageClass);
        this.tapToDismiss = use(config.tapToDismiss, this.tapToDismiss);
        this.toastComponent = use(config.toastComponent, this.toastComponent);
        this.onActivateTick = use(config.onActivateTick, this.onActivateTick);
    }
    return ToastConfig;
}());
export { ToastConfig };
var ToastrIconClasses = (function () {
    function ToastrIconClasses() {
    }
    ToastrIconClasses.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ToastrIconClasses.ctorParameters = function () { return []; };
    return ToastrIconClasses;
}());
export { ToastrIconClasses };
/**
 * Global Toast configuration
 */
var ToastrConfig = (function (_super) {
    __extends(ToastrConfig, _super);
    function ToastrConfig(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, config) || this;
        /** max toasts opened. Toasts will be queued */
        _this.maxOpened = 0;
        /** dismiss current toast when max is reached */
        _this.autoDismiss = false;
        _this.iconClasses = {
            error: 'toast-error',
            info: 'toast-info',
            success: 'toast-success',
            warning: 'toast-warning',
        };
        /** new toast placement */
        _this.newestOnTop = true;
        /** block duplicate messages */
        _this.preventDuplicates = false;
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        _this.maxOpened = use(config.maxOpened, _this.maxOpened);
        _this.autoDismiss = use(config.autoDismiss, _this.autoDismiss);
        _this.newestOnTop = use(config.newestOnTop, _this.newestOnTop);
        _this.preventDuplicates = use(config.preventDuplicates, _this.preventDuplicates);
        if (config.iconClasses) {
            _this.iconClasses.error = config.iconClasses.error || _this.iconClasses.error;
            _this.iconClasses.info = config.iconClasses.info || _this.iconClasses.info;
            _this.iconClasses.success = config.iconClasses.success || _this.iconClasses.success;
            _this.iconClasses.warning = config.iconClasses.warning || _this.iconClasses.warning;
        }
        return _this;
    }
    ToastrConfig.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ToastrConfig.ctorParameters = function () { return [
        { type: ToastrConfig, },
    ]; };
    return ToastrConfig;
}(ToastConfig));
export { ToastrConfig };
var ToastData = (function () {
    function ToastData() {
    }
    return ToastData;
}());
export { ToastData };
