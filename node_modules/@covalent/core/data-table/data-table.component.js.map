{"version":3,"file":"data-table.component.js","sourceRoot":"","sources":["../../../../src/platform/core/data-table/data-table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, EventEmitter, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef,\n         ContentChildren, TemplateRef, AfterContentInit, QueryList, Inject, Optional, ViewChildren } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk';\n\nimport { TdDataTableRowComponent } from './data-table-row/data-table-row.component';\nimport { ITdDataTableSortChangeEvent } from './data-table-column/data-table-column.component';\nimport { TdDataTableTemplateDirective } from './directives/data-table-template.directive';\n\nconst noop: any = () => {\n  // empty method\n};\n\nexport const TD_DATA_TABLE_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TdDataTableComponent),\n  multi: true,\n};\n\nexport enum TdDataTableSortingOrder {\n  Ascending = <any>'ASC',\n  Descending = <any>'DESC',\n}\n\nexport interface ITdDataTableColumn {\n  name: string;\n  label: string;\n  tooltip?: string;\n  numeric?: boolean;\n  format?: (value: any) => any;\n  nested?: boolean;\n  sortable?: boolean;\n  hidden?: boolean;\n  filter?: boolean;\n}\n\nexport interface ITdDataTableSelectEvent {\n  row: any;\n  selected: boolean;\n}\n\nexport interface ITdDataTableSelectAllEvent {\n  rows: any[];\n  selected: boolean;\n}\n\nexport interface ITdDataTableRowClickEvent {\n  row: any;\n}\n\nexport enum TdDataTableArrowKeyDirection {\n  Ascending = <any>'ASC',\n  Descending = <any>'DESC',\n}\n\n@Component({\n  providers: [ TD_DATA_TABLE_CONTROL_VALUE_ACCESSOR ],\n  selector: 'td-data-table',\n  styleUrls: ['./data-table.component.scss' ],\n  templateUrl: './data-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdDataTableComponent implements ControlValueAccessor, AfterContentInit {\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  private _value: any[] = [];\n  /** Callback registered via registerOnChange (ControlValueAccessor) */\n  private _onChangeCallback: (_: any) => void = noop;\n\n  /** internal attributes */\n  private _data: any[];\n  private _columns: ITdDataTableColumn[];\n  private _selectable: boolean = false;\n  private _clickable: boolean = false;\n  private _multiple: boolean = true;\n  private _allSelected: boolean = false;\n  private _indeterminate: boolean = false;\n\n  /** sorting */\n  private _sortable: boolean = false;\n  private _sortBy: ITdDataTableColumn;\n  private _sortOrder: TdDataTableSortingOrder = TdDataTableSortingOrder.Ascending;\n\n  /** shift select */\n  private _lastSelectedIndex: number = -1;\n  private _selectedBeforeLastIndex: number = -1;\n  private _lastArrowKeyDirection: TdDataTableArrowKeyDirection;\n\n  /** template fetching support */\n  private _templateMap: Map<string, TemplateRef<any>> = new Map<string, TemplateRef<any>>();\n  @ContentChildren(TdDataTableTemplateDirective) _templates: QueryList<TdDataTableTemplateDirective>;\n\n  @ViewChildren(TdDataTableRowComponent) _rows: QueryList<TdDataTableRowComponent>;\n\n  /**\n   * Returns true if all values are selected.\n   */\n  get allSelected(): boolean {\n    return this._allSelected;\n  }\n\n  /**\n   * Returns true if all values are not deselected\n   * and atleast one is.\n   */\n  get indeterminate(): boolean {\n    return this._indeterminate;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  @Input() set value(v: any) {\n    if (v !== this._value) {\n      this._value = v;\n      this._onChangeCallback(v);\n      this.refresh();\n    }\n  }\n  get value(): any { return this._value; }\n\n  /**\n   * data?: {[key: string]: any}[]\n   * Sets the data to be rendered as rows.\n   */\n  @Input('data')\n  set data(data: any[]) {\n    this._data = data;\n    this.refresh();\n  }\n  get data(): any[] {\n    return this._data;\n  }\n\n  /**\n   * columns?: ITdDataTableColumn[]\n   * Sets additional column configuration. [ITdDataTableColumn.name] has to exist in [data] as key.\n   * Defaults to [data] keys.\n   */\n  @Input('columns')\n  set columns(cols: ITdDataTableColumn[]) {\n    this._columns = cols;\n  }\n  get columns(): ITdDataTableColumn[] {\n    if (this._columns) {\n      return this._columns;\n    }\n\n    if (this.hasData) {\n      this._columns = [];\n      // if columns is undefined, use key in [data] rows as name and label for column headers.\n      let row: any = this._data[0];\n      Object.keys(row).forEach((k: string) => {\n        if (!this._columns.find((c: any) => c.name === k)) {\n          this._columns.push({ name: k, label: k });\n        }\n      });\n      return this._columns;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * selectable?: boolean\n   * Enables row selection events, hover and selected row states.\n   * Defaults to 'false'\n   */\n  @Input('selectable')\n  set selectable(selectable: string | boolean) {\n    this._selectable = selectable !== '' ? (selectable === 'true' || selectable === true) : true;\n  }\n  get isSelectable(): boolean {\n    return this._selectable;\n  }\n\n  /**\n   * clickable?: boolean\n   * Enables row click events, hover.\n   * Defaults to 'false'\n   */\n  @Input('clickable')\n  set clickable(clickable: string | boolean) {\n    this._clickable = clickable !== '' ? (clickable === 'true' || clickable === true) : true;\n  }\n  get isClickable(): boolean {\n    return this._clickable;\n  }\n\n  /**\n   * multiple?: boolean\n   * Enables multiple row selection. [selectable] needs to be enabled.\n   * Defaults to 'false'\n   */\n  @Input('multiple')\n  set multiple(multiple: string | boolean) {\n    this._multiple = multiple !== '' ? (multiple === 'true' || multiple === true) : true;\n  }\n  get isMultiple(): boolean {\n    return this._multiple;\n  }\n\n  /**\n   * sortable?: boolean\n   * Enables sorting events, sort icons and active column states.\n   * Defaults to 'false'\n   */\n  @Input('sortable')\n  set sortable(sortable: string | boolean) {\n    this._sortable = sortable !== '' ? (sortable === 'true' || sortable === true) : true;\n  }\n  get isSortable(): boolean {\n    return this._sortable;\n  }\n\n  /**\n   * sortBy?: string\n   * Sets the active sort column. [sortable] needs to be enabled.\n   */\n  @Input('sortBy')\n  set sortBy(columnName: string) {\n    if (!columnName) {\n      return;\n    }\n    const column: ITdDataTableColumn = this.columns.find((c: any) => c.name === columnName);\n    if (!column) {\n      throw new Error('[sortBy] must be a valid column name');\n    }\n\n    this._sortBy = column;\n  }\n  get sortByColumn(): ITdDataTableColumn {\n    return this._sortBy;\n  }\n\n  /**\n   * sortOrder?: ['ASC' | 'DESC'] or TdDataTableSortingOrder\n   * Sets the sort order of the [sortBy] column. [sortable] needs to be enabled.\n   * Defaults to 'ASC' or TdDataTableSortingOrder.Ascending\n   */\n  @Input('sortOrder')\n  set sortOrder(order: 'ASC' | 'DESC') {\n    let sortOrder: string = order ? order.toUpperCase() : 'ASC';\n    if (sortOrder !== 'DESC' && sortOrder !== 'ASC') {\n      throw new Error('[sortOrder] must be empty, ASC or DESC');\n    }\n\n    this._sortOrder = sortOrder === 'ASC' ?\n      TdDataTableSortingOrder.Ascending : TdDataTableSortingOrder.Descending;\n  }\n  get sortOrderEnum(): TdDataTableSortingOrder {\n    return this._sortOrder;\n  }\n\n  get hasData(): boolean {\n    return this._data && this._data.length > 0;\n  }\n\n  /**\n   * sortChange?: function\n   * Event emitted when the column headers are clicked. [sortable] needs to be enabled.\n   * Emits an [ITdDataTableSortChangeEvent] implemented object.\n   */\n  @Output('sortChange') onSortChange: EventEmitter<ITdDataTableSortChangeEvent> =\n                                      new EventEmitter<ITdDataTableSortChangeEvent>();\n\n  /**\n   * rowSelect?: function\n   * Event emitted when a row is selected/deselected. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectEvent] implemented object.\n   */\n  @Output('rowSelect') onRowSelect: EventEmitter<ITdDataTableSelectEvent> = new EventEmitter<ITdDataTableSelectEvent>();\n\n  /**\n   * rowClick?: function\n   * Event emitted when a row is clicked.\n   * Emits an [ITdDataTableRowClickEvent] implemented object.\n   */\n  @Output('rowClick') onRowClick: EventEmitter<ITdDataTableRowClickEvent> = new EventEmitter<ITdDataTableRowClickEvent>();\n\n  /**\n   * selectAll?: function\n   * Event emitted when all rows are selected/deselected by the all checkbox. [selectable] needs to be enabled.\n   * Emits an [ITdDataTableSelectAllEvent] implemented object.\n   */\n  @Output('selectAll') onSelectAll: EventEmitter<ITdDataTableSelectAllEvent> =\n                                    new EventEmitter<ITdDataTableSelectAllEvent>();\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * compareWith?: function(row, model): boolean\n   * Allows custom comparison between row and model to see if row is selected or not\n   * Default comparation is by object reference\n   */\n  @Input('compareWith') compareWith: (row: any, model: any) => boolean = (row: any, model: any) => {\n    return row === model;\n  }\n\n  /**\n   * Loads templates and sets them in a map for faster access.\n   */\n  ngAfterContentInit(): void {\n    for (let i: number = 0; i < this._templates.toArray().length; i++) {\n      this._templateMap.set(\n        this._templates.toArray()[i].tdDataTableTemplate,\n        this._templates.toArray()[i].templateRef,\n      );\n    }\n  }\n\n  getCellValue(column: ITdDataTableColumn, value: any): string {\n    if (column.nested === undefined || column.nested) {\n      return this._getNestedValue(column.name, value);\n    }\n    return value[column.name];\n  }\n\n  /**\n   * Getter method for template references\n   */\n   getTemplateRef(name: string): TemplateRef<any> {\n     return this._templateMap.get(name);\n   }\n\n  /**\n   * Clears model (ngModel) of component by removing all values in array.\n   */\n  clearModel(): void {\n    this._value.splice(0, this._value.length);\n  }\n\n  /**\n   * Refreshes data table and rerenders [data] and [columns]\n   */\n  refresh(): void {\n    this._calculateCheckboxState();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Selects or clears all rows depending on 'checked' value.\n   */\n  selectAll(checked: boolean): void {\n    let toggledRows: any[] = [];\n    if (checked) {\n      this._data.forEach((row: any) => {\n        // skiping already selected rows\n        if (!this.isRowSelected(row)) {\n          this._value.push(row);\n          // checking which ones are being toggled\n          toggledRows.push(row);\n        }\n      });\n      this._allSelected = true;\n      this._indeterminate = true;\n    } else {\n      this._data.forEach((row: any) => {\n        // checking which ones are being toggled\n        if (this.isRowSelected(row)) {\n          toggledRows.push(row);\n        }\n      });\n      this.clearModel();\n      this._allSelected = false;\n      this._indeterminate = false;\n    }\n    this.onSelectAll.emit({rows: toggledRows, selected: checked});\n  }\n\n  /**\n   * Checks if row is selected\n   */\n  isRowSelected(row: any): boolean {\n    // compare items by [compareWith] function\n    return this._value ? this._value.filter((val: any) => {\n      return this.compareWith(row, val);\n    }).length > 0 : false;\n  }\n\n  /**\n   * Selects or clears a row depending on 'checked' value if the row 'isSelectable'\n   * handles cntrl clicks and shift clicks for multi-select\n   */\n  select(row: any, event: Event, currentSelected: number): void {\n    if (this.isSelectable) {\n      this.blockEvent(event);\n      this._doSelection(row);\n\n      // Check to see if Shift key is selected and need to select everything in between\n      let mouseEvent: MouseEvent = event as MouseEvent;\n      if (this.isMultiple && mouseEvent && mouseEvent.shiftKey && this._lastSelectedIndex > -1) {\n        let firstIndex: number = currentSelected;\n        let lastIndex: number = this._lastSelectedIndex;\n        if (currentSelected > this._lastSelectedIndex) {\n          firstIndex = this._lastSelectedIndex;\n          lastIndex = currentSelected;\n        }\n        for (let i: number = firstIndex + 1; i < lastIndex; i++) {\n          this._doSelection(this._data[i]);\n        }\n      }\n      // set the last selected attribute unless the last selected unchecked a row\n      if (this.isRowSelected(this._data[currentSelected])) {\n        this._selectedBeforeLastIndex = this._lastSelectedIndex;\n        this._lastSelectedIndex = currentSelected;\n      } else {\n        this._lastSelectedIndex = this._selectedBeforeLastIndex;\n      }\n      // everything is unselected so start over\n      if (!this._indeterminate && !this._allSelected) {\n        this._lastSelectedIndex = -1;\n      }\n    }\n  }\n\n  /**\n   * Overrides the onselectstart method of the document so other text on the page\n   * doesn't get selected when doing shift selections.\n   */\n  disableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = function(): boolean {\n        return false;\n      };\n    }\n  }\n\n  /**\n   * Resets the original onselectstart method.\n   */\n  enableTextSelection(): void {\n    if (this._document) {\n      this._document.onselectstart = undefined;\n    }\n  }\n\n  /**\n   * emits the onRowClickEvent when a row is clicked\n   * if clickable is true and selectable is false then select the row\n   */\n  handleRowClick(row: any, event: Event): void {\n    if (this.isClickable) {\n      // ignoring linting rules here because attribute it actually null or not there\n      // can't check for undefined\n      const srcElement: any = event.srcElement || event.currentTarget;\n      /* tslint:disable-next-line */\n      if (srcElement.getAttribute('stopRowClick') === null) {\n        this.onRowClick.emit({row: row});\n      }\n    }\n  }\n\n  /**\n   * Method handle for sort click event in column headers.\n   */\n  handleSort(column: ITdDataTableColumn): void {\n    if (this._sortBy === column) {\n      this._sortOrder = this._sortOrder === TdDataTableSortingOrder.Ascending ?\n        TdDataTableSortingOrder.Descending : TdDataTableSortingOrder.Ascending;\n    } else {\n      this._sortBy = column;\n      this._sortOrder = TdDataTableSortingOrder.Ascending;\n    }\n    this.onSortChange.next({ name: this._sortBy.name, order: this._sortOrder });\n  }\n\n  /**\n   * Handle all keyup events when focusing a data table row\n   */\n  _rowKeyup(event: KeyboardEvent, row: any, index: number): void {\n    let length: number;\n    let rows: TdDataTableRowComponent[];\n    switch (event.keyCode) {\n      case ENTER:\n      case SPACE:\n        /** if user presses enter or space, the row should be selected */\n        this.select(row, event, index);\n        break;\n      case UP_ARROW:\n        rows = this._rows.toArray();\n        length = rows.length;\n\n        // check to see if changing direction and need to toggle the current row\n        if (this._lastArrowKeyDirection === TdDataTableArrowKeyDirection.Descending) {\n          index++;\n        }\n        /**\n         * if users presses the up arrow, we focus the prev row\n         * unless its the first row, then we move to the last row\n         */\n        if (index === 0) {\n          if (!event.shiftKey) {\n            rows[length - 1].focus();\n          }\n        } else {\n          rows[index - 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.isMultiple && event.shiftKey) {\n          this._doSelection(this._data[index - 1]);\n          // if the checkboxes are all unselected then start over otherwise handle changing direction\n          this._lastArrowKeyDirection = (!this._allSelected && !this._indeterminate) ? undefined : TdDataTableArrowKeyDirection.Ascending;\n        }\n        break;\n      case DOWN_ARROW:\n        rows = this._rows.toArray();\n        length = rows.length;\n\n        // check to see if changing direction and need to toggle the current row\n        if (this._lastArrowKeyDirection === TdDataTableArrowKeyDirection.Ascending) {\n          index--;\n        }\n        /**\n         * if users presses the down arrow, we focus the next row\n         * unless its the last row, then we move to the first row\n         */\n        if (index === (length - 1)) {\n          if (!event.shiftKey) {\n           rows[0].focus();\n          }\n        } else {\n          rows[index + 1].focus();\n        }\n        this.blockEvent(event);\n        if (this.isMultiple && event.shiftKey) {\n          this._doSelection(this._data[index + 1]);\n          // if the checkboxes are all unselected then start over otherwise handle changing direction\n          this._lastArrowKeyDirection = (!this._allSelected && !this._indeterminate) ? undefined : TdDataTableArrowKeyDirection.Descending;\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Method to prevent the default events\n   */\n  blockEvent(event: Event): void {\n    event.preventDefault();\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  onChange = (_: any) => noop;\n  onTouched = () => noop;\n\n  private _getNestedValue(name: string, value: any): string {\n    if (!(value instanceof Object) || !name) {\n      return value;\n    }\n    if (name.indexOf('.') > -1) {\n      let splitName: string[] = name.split(/\\.(.+)/, 2);\n      return this._getNestedValue(splitName[1], value[splitName[0]]);\n    } else {\n      return value[name];\n    }\n  }\n\n  /**\n   * Does the actual Row Selection\n   */\n  private _doSelection(row: any): void {\n    let wasSelected: boolean = this.isRowSelected(row);\n    if (!this._multiple) {\n      this.clearModel();\n    }\n    if (!wasSelected) {\n      this._value.push(row);\n    } else {\n      // compare items by [compareWith] function\n      row = this._value.filter((val: any) => {\n        return this.compareWith(row, val);\n      })[0];\n      let index: number = this._value.indexOf(row);\n      if (index > -1) {\n        this._value.splice(index, 1);\n      }\n    }\n    this._calculateCheckboxState();\n    this.onRowSelect.emit({row: row, selected: this.isRowSelected(row)});\n    this.onChange(this._value);\n  }\n\n  /**\n   * Calculate all the state of all checkboxes\n   */\n  private _calculateCheckboxState(): void {\n    this._calculateAllSelected();\n    this._calculateIndeterminate();\n  }\n\n  /**\n   * Checks if all visible rows are selected.\n   */\n  private _calculateAllSelected(): void {\n    const match: string =\n      this._data ? this._data.find((d: any) => !this.isRowSelected(d)) : true;\n    this._allSelected = typeof match === 'undefined';\n  }\n\n  /**\n   * Checks if all visible rows are selected.\n   */\n  private _calculateIndeterminate(): void {\n    this._indeterminate = false;\n    if (this._data) {\n      for (let row of this._data) {\n        if (!this.isRowSelected(row)) {\n          continue;\n        }\n        this._indeterminate = true;\n      }\n    }\n  }\n}\n"]}