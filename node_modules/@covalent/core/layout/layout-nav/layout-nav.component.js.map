{"version":3,"file":"layout-nav.component.js","sourceRoot":"","sources":["../../../../../src/platform/core/layout/layout-nav/layout-nav.component.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAc,QAAQ,EAAU,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAQzC,IAAa,oBAAoB;IA8C/B,8BAAgC,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAtB/C;;;;;WAKG;QACa,UAAK,GAAW,SAAS,CAAC;IAgBQ,CAAC;IAJnD,sBAAI,+CAAa;QAHjB;;WAEG;aACH;YACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;QAClD,CAAC;;;OAAA;IAID,oDAAqB,GAArB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACH,2BAAC;AAAD,CAAC,AArDD,IAqDC;AA9CwB;IAAtB,KAAK,CAAC,cAAc,CAAC;;0DAAsB;AAO7B;IAAd,KAAK,CAAC,MAAM,CAAC;;kDAAc;AAQb;IAAd,KAAK,CAAC,MAAM,CAAC;;kDAAc;AAQZ;IAAf,KAAK,CAAC,OAAO,CAAC;;mDAA2B;AAOhB;IAAzB,KAAK,CAAC,iBAAiB,CAAC;;6DAAyB;AArCvC,oBAAoB;IALhC,SAAS,CAAC;QACT,QAAQ,EAAE,eAAe;QACzB,SAAS,EAAE,CAAC,6BAA6B,CAAE;QAC3C,WAAW,EAAE,6BAA6B;KAC3C,CAAC;IA+Ca,WAAA,QAAQ,EAAE,CAAA;qCAAkB,MAAM;GA9CpC,oBAAoB,CAqDhC;SArDY,oBAAoB","sourcesContent":["import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styleUrls: ['./layout-nav.component.scss' ],\n  templateUrl: './layout-nav.component.html',\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n"]}