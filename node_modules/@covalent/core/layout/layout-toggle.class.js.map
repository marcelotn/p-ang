{"version":3,"file":"layout-toggle.class.js","sourceRoot":"","sources":["../../../../src/platform/core/layout/layout-toggle.class.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAe,YAAY,EAAwC,MAAM,eAAe,CAAC;AAMvG,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAS9C;IAuBE,sBAAsB,OAAyB,EAC3B,SAAoB,EACpB,WAAuB;QAFrB,YAAO,GAAP,OAAO,CAAkB;QAC3B,cAAS,GAAT,SAAS,CAAW;QACpB,gBAAW,GAAX,WAAW,CAAY;QAvBnC,iBAAY,GAAY,KAAK,CAAC;QAC9B,cAAS,GAAY,KAAK,CAAC;QAC3B,oBAAe,GAAY,KAAK,CAAC;QAsBvC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;IACnF,CAAC;IArBD,sBAAI,kCAAQ;aAAZ,UAAa,QAAiB;YAC5B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC5B,CAAC;;;OAAA;IAQD,sBAAI,wCAAc;QANlB;;;;WAIG;aAEH,UAAmB,cAAuB;YACxC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,CAAC;QACH,CAAC;;;OAAA;IAQD,sCAAe,GAAf;QAAA,iBAKC;QAJC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC;YACnF,KAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IAEH,oCAAa,GAAb,UAAc,KAAY;QACxB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAIO,wCAAiB,GAAzB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC7E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAEH,mBAAC;AAAD,CAAC,AAzDD,IAyDC;;AAzCC;IADC,KAAK,CAAC,gBAAgB,CAAC;;;kDAMvB;AAmBD;IADC,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC;;qCACb,KAAK;;iDAKzB","sourcesContent":["import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit } from '@angular/core';\n\nimport { MdSidenavToggleResult, MdSidenav } from '@angular/material';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { merge } from 'rxjs/observable/merge';\n\nexport interface ILayoutTogglable {\n  sidenav: MdSidenav;\n  toggle(): Promise<MdSidenavToggleResult>;\n  open(): Promise<MdSidenavToggleResult>;\n  close(): Promise<MdSidenavToggleResult>;\n}\n\nexport abstract class LayoutToggle implements AfterViewInit {\n\n  private _initialized: boolean = false;\n  private _disabled: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  set disabled(disabled: boolean) {\n    this._disabled = disabled;\n  }\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened') \n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    merge(this._layout.sidenav.onOpenStart, this._layout.sidenav.onCloseStart).subscribe(() => {\n      this._toggleVisibility();\n    });\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this._disabled) {\n      this.onClick();\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout.sidenav._opened && this._hideWhenOpened) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n    }\n  }\n\n}\n"]}